[ Paging ]
> Memory 切成數個 fixed-size Block(Page/Frame)  // 很像Fixed Partitions
> 每個process擁有數個分散各地的Pages，並用Page Table來使標記要使用哪些Frame當自身的Page
> Internal Fragmentation
	
- Information:
	Logical Address = m,  // [p, d]
	Physical Address = l,  // [f, d]
	Page offset = n.  // d
	
	- Logicl Address: m bit
		> Logical Address Space: 2^(m) words
		> p: m - n bit
		> d: n bit
		> Page entry: e bit  // 通常是word大小
		- Page Table:
			> Page Table Size: Pages Number * Page Size　* Page entry = pow(2, m+e) bytes
			> Page Max Size: pow(2, n) entries
			> Pages Max Number: pow(2, m-n) pages
	
	- Physical Address: l bit
		> Physical Address Space = 2^(l) words
		> f: l - n bit 
		> d: n bit
		> Memory entry: 4 bytes  // word
		- Memory:
			> Memory Size: Frames Number * Frame Size * Memory entry = pow(2, l+4) bytes
			> Frame Max Size: pow(2, n) entries
			> Frames Max Number: pow(2, l-n) frames
			
- Algorithm 1: Only Page Table
	> Graph
		CPU -----[p, d]----->| Page Table |------[f, d]------> Memory
		
	> Logical Address [p, d]: Page Number, Page Offest
	> Physical Address [f, d]: frame Number, frame Offest
	
	1. CPU 產生 logical address('p' and 'd').
	2. 將虛擬位置 Page Number scaling成實體位置 Page location(number + Page Table Base).
	3. 產生 Physical Address('f', and copy 'd' in there).
	4. 利用Frame number找到正確的frame. 
	
- Algorithm 2: Page Table + TLB
	> Graph
		CPU -----[p, d]----TLB Miss---->|  Page Table |------[f, d]------> Memory
				  |-------------------->| TLB enrty 1 |       ^
				  |-------------------->| TLB enrty 2 |-------| 
				  |-------------------->| TLB enrty 3 | TLB Hit
	
	1. CPU 產生 logical address('p' and 'd').
	2. TLB 尋找是否有存相同的Page Number.
	3. TLB Hit: 從TLB找到位置，填入'f'
	4. TLB MISS: 找不到，Scaling Page Number 並到Page Table尋找
	5. 產生 Physical Address('f', and copy 'd' in there).
	6. 利用Frame number找到正確的frame. 
	7. 將新的[tag, value]加入TLB.
	
	> TLB Miss: 多了Scaling, Memory access, Update的過程
	
	
- Implement
	- Page Table
		> Table in Register: fast, but need small
			- Advantages: 
				> Fast Allocation: one memory access.
			- DisAdvantages:
				> Size need small.
				> Slow Context Switch: need all be replace.
		
		> Table in Memory:
			- Advantages: 
				> Fast Context Switch: only replace Page_Table Base Register(RTBR).  // Page Table Base 用在Scaling
				> Size is Unlimited.
			- DisAdvantages:
				> Slow Allocation: twice memory access.  // 使用TLB改善
					
	- Translation Look_aside Buffer(TLB)
		> 用以減少Table in Memory的二次存取，新增allocation的第二途徑.
		
		- information:
			> 存儲最近使用過的Page Number(tag)及轉換後的Frame Number(value)，相當於一個速查表.
			> 大多時候能取代Page Table，產生Frame Number且快很多時間
			> TLB Hit: 透過TLB得到Number，省去了scaling, access, generation的過程
			> TLB Miss: 未在TLB時依然到Page Table去找，並且更新TLB(Overhead)
			> Hit Ratio: Hit/ (Hit + Miss)
				> 現今Ratio可達90%以上
				> Intel 486 有 32_register TLB 以及宣稱有98% Ratio
			> Access Time: (Ratio * (TLB access + Memory access)) + ((1 - Ratio) * (TLB access + Table access + Memory access))
				> 現今可大略看成 90% HIT(1 Memory access) + 10% MISS(2 Memory access) = 1.1 Average Memory access
			
		- Advantages: 
			> TLB Hit時的速度比TLB Miss的速度快很多，1 Miss Time ~= 10 Hit Time
			> 一次的TLB Miss能帶來非常多TLB Hit
			> 與原本將Table放在Memory的方法(2 Memory access)來說快將近一倍
			
		- Disadvantages: 
			> 需使用額外硬體，增加成本
			
		> Address_Space Identifiers(ASID):
			> 為了預防Context Switch後的大量TLB Miss
			> 將TLB切成多個區域並以ASID來區分給process使用，Switch 時替換 ASID 的作法取代了flush TLB
			
	- Protection 
		> 善加利用Page entry的額外bit，做出額外的功能
		> program code bit  // 標示是否為程式碼，以決定是否被允許做修改
		> dirty bit  // 資料是否以被修改，用於Caching_Buffering時的Synchronization
		> Page Table 過大而資料過少:
			1. Valid_Invalid bit: 標記這個Page entry是否需要使用，在維護Page entry時可忽略掉不須使用的部分
			2. Page Table Length Register(PTLR): 在PCB裡加入PTLR去紀錄Page Table大小
		
	- Sharing
		> 將相同program不同process的 code Pages 指向相同的Frame
			> example:
				notepad.exe P1's Page Table:
					code1 page: frame 2,
					code2 page: frame 5,
					code3 page: frame 1,
					data page: frame 3.
					
				notepad.exe P2's Page Table:
					code1 page: frame 2,
					code2 page: frame 5,
					code3 page: frame 1,
					data page: frame 9
					
	- Multilevel Paging
		> 由於page table 可能會大到甚至塞不進自己的page，所以要分層
		> logical address [p, d] => [p1, p2, p3..., d]
		> 能使table分割，但total table size變大
		> 大多時只需做TLB Access，增加多層paging增加的時間其實不多
		> memory access: 看分成多少level
		> [p1, p2, d] = [0, 1, 2]
			p1 0| a | ---> p2 0| b |		
			   1| d |		  1| c | ---> frame 0|  ...  |
							  2| z |			1|  ...  |
							  3| x | 			2| "ice" |
												    ...
				
	- Hashed Page Table
		> 將所有page透過hash function分成多個bucket，並用linked list串起來
		> 搜尋時透過hash到特定的bucket，依序尋找直到page number符合
		> 可以所有程式共用Hashed Page Tables
		> hash function用硬體取代，雖變貴但也能很快
		> memory access: 於bucket存取的次數，最差為找到最後一個
		> [p, d] = [8, 1]
			h(p) = p % 3 = 2     bucket 0
						   |     bucket 1
				           |---> bucket 2 --> [2, f] --> [14, k] --> [8, a]
						   
	- Inverted Page Table	
		> Table內個每個entry對應memory每個frame，透過entry index來尋找對應的frame
		> 所有process共用此Inverted Page Table，用Pid及page number來做比對
		> 因physical address是看index而非entey data，因此稱為inverted
		> 優點: 
			> 減少table size，並且給予一個可預期的上限值
		> 缺點: 
			> 在table搜尋對應的entry時太花時間，可用hash尋找
			> 難以使用shared技術
		> [pid, p, d] = [6666, 2, 1]
			inverted table 	index  pid number
							  11 | 2245, 2 |
							  12 | 113 , 4 |
							  13 | 5399, 16|
							  14 | 6666, 2 | --> [14 frame, 2 offset]
							  15 | 2245, 3 |
							  16 | 6666, 1 |
		
	[ Segmentation ]
	> Motivation: 將program依照邏輯劃分成多個長度不等的segment，任意放入memory內
	> Relevant: Page  // 想法實作大多與Page相同
	> External fragmentation
	> Algorithm:
		/                        Segment Table
		|                      |       |      |
		|           |--------->| limit | base |-------v             
		| CPU -----[s, d]      |       |      |      (+)--->Memory
		|              |           |                  ^
		|              |           v                  |
		|              |----------(<)-----------------|
		\
	
		1. CPU 產生 logical address('s' and 'd').
		2. 利用's'查詢到Segment Table enrty
		3. 測試offset是否小於limit，若不是則發生意外(trap)
		4. 將offset與base相加，取得memory address
		5. 利用memory address找到位置讀取資料
			
	- Implement:
		> TLB
		> Segment_table base register(STBR)
		> Segment_table length register(STLR)